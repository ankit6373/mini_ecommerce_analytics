name: Provision Plan

on:
  pull_request:
    branches: [ qa, main ]
    paths:
      - 'provision/**'
      - 'sql_files/**'
      - 'snowsql/**'
      - 'toolkit.conf'
      - '.github/workflows/**'

jobs:
  lint:
    name: Lint Workflows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install actionlint
        run: |
          curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash -o /tmp/download-actionlint.bash
          bash /tmp/download-actionlint.bash latest /usr/local/bin
      - name: Run actionlint
        run: actionlint -color

  plan:
    name: Snowflake Plan
    runs-on: ubuntu-latest
    needs: lint
    env:
      ENV: ${{ github.base_ref == 'qa' && 'QA' || 'PROD' }}
      SNOWFLAKE_ACCOUNT:   ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_USER:      ${{ github.base_ref == 'qa' && secrets.SNOWFLAKE_USER_QA   || secrets.SNOWFLAKE_USER_PROD }}
      SNOWFLAKE_PASSWORD:  ${{ github.base_ref == 'qa' && secrets.SNOWFLAKE_PASSWORD_QA || secrets.SNOWFLAKE_PASSWORD_PROD }}
      SNOWFLAKE_ROLE:      ${{ github.base_ref == 'qa' && secrets.SNOWFLAKE_ROLE_QA   || secrets.SNOWFLAKE_ROLE_PROD }}
      SNOWSQL_PWD:         ${{ github.base_ref == 'qa' && secrets.SNOWFLAKE_PASSWORD_QA || secrets.SNOWFLAKE_PASSWORD_PROD }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17 (Toolkit requires Java)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install phData Toolkit CLI
        env:
          TOOLKIT_VERSION: "0.79.0"
          TOOLKIT_URL: "https://repo.phdata.io/3BCJzuXgtfTCoa6c/toolkit-cli/maven/io/phdata/toolkit/toolkit-cli/0.79.0/toolkit-cli-0.79.0.zip"
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$HOME/.phdata/toolkit-${TOOLKIT_VERSION}"
          mkdir -p "$ROOT"
          printf 'Downloading Toolkit: %s\n' "$TOOLKIT_URL"
          curl -sSfL "$TOOLKIT_URL" -o "/tmp/toolkit-${TOOLKIT_VERSION}.zip"
          unzip -q "/tmp/toolkit-${TOOLKIT_VERSION}.zip" -d "$ROOT"

          # Look for the 'toolkit' launcher script, even if not executable yet
          BIN_PATH="$(find "$ROOT" -maxdepth 2 -type f -name toolkit | head -n1 || true)"
          if [ -n "$BIN_PATH" ]; then
          chmod +x "$BIN_PATH"
          DIRNAME="$(dirname "$BIN_PATH")"
          echo "$DIRNAME" >> "$GITHUB_PATH"
          export PATH="$DIRNAME:$PATH"
          else
            echo "Could not find 'toolkit' launcher script in extracted archive. Contents:"
            find "$ROOT" -maxdepth 2 -print
            exit 1
          fi

          WHICH_TOOLKIT="$(command -v toolkit || true)"
          if [ -n "$WHICH_TOOLKIT" ]; then
            printf 'Toolkit on PATH: %s\n' "$WHICH_TOOLKIT"
          else
            echo "Toolkit not found on PATH (unexpected)"; exit 1
          fi
          toolkit --version || true

      - name: Authenticate Toolkit
        env:
          TOOLKIT_TOKEN: ${{ secrets.TOOLKIT_TOKEN }}
        run: toolkit auth set-token "$TOOLKIT_TOKEN"

      - name: Provision (plan only)
        run: toolkit provision apply --plan

      - name: List changed SQL files (informational)
        shell: bash
        run: |
          set -euo pipefail
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          git diff --name-only "$BASE_SHA" "$HEAD_SHA" | grep -E '^sql_files/.*\.sql$' || echo "No SQL changes."


