!set variable_substitution=true;

-- Target context = SILVER/SALES for the current ENV (DEV/QA/PROD)
USE DATABASE &{ENV}_SILVER;
USE SCHEMA SALES;


CREATE OR REPLACE TABLE FACT_ORDER_ITEMS (
  ORDER_ITEM_ID          NUMBER        PRIMARY KEY COMMENT 'BUSINESS KEY FROM STAGING.ORDER_ITEMS',
  ORDER_ID               NUMBER        COMMENT 'It stores the ORDER ID from STAGING.ORDERS_ITEMS',
  CUSTOMER_ID            NUMBER        COMMENT 'FK TO DIM_CUSTOMER (BUSINESS KEY)',
  PRODUCT_ID             NUMBER        COMMENT 'FK TO DIM_PRODUCT (BUSINESS KEY)',
  INVENTORY_ITEM_ID      NUMBER        COMMENT 'It stores Inventory item key',
  DC_ID                  NUMBER        COMMENT 'OPTIONAL: from PRODUCT.DISTRIBUTION_CENTER_ID',
  ORDER_DATE_ID          NUMBER        COMMENT 'YYYYMMDD from CREATED_AT',
  SHIPPED_DATE_ID        NUMBER        COMMENT 'YYYYMMDD from SHIPPED_AT',
  DELIVERED_DATE_ID      NUMBER        COMMENT 'YYYYMMDD from DELIVERED_AT',
  RETURNED_DATE_ID       NUMBER        COMMENT 'YYYYMMDD from RETURNED_AT',
  STATUS                 STRING        COMMENT 'It stores the item status',
  QUANTITY               NUMBER        COMMENT 'Default 1',
  SALES_PRICE            NUMBER(18,2)  COMMENT 'It stores Selling price per Item',
  UNIT_COST_AT_SALE      NUMBER(18,2)  COMMENT 'It stores cost captured from inventory item (If available)',
  GROSS_MARGIN           NUMBER(18,2)  COMMENT 'SALES_PRICE - UNIT_COST_AT_SALE'
)
COMMENT='Core sales FACT at LINE-ITEM grain, If an order has 3 different products, it will have 3 different rows in this table';

INSERT INTO FACT_ORDER_ITEMS (
  ORDER_ITEM_ID, ORDER_ID, CUSTOMER_ID, PRODUCT_ID, INVENTORY_ITEM_ID, DC_ID,
  ORDER_DATE_ID, SHIPPED_DATE_ID, DELIVERED_DATE_ID, RETURNED_DATE_ID,
  STATUS, QUANTITY, SALES_PRICE, UNIT_COST_AT_SALE, GROSS_MARGIN
)
SELECT
  OI.ORDER_ITEM_ID,
  OI.ORDER_ID,
  OI.CUSTOMER_ID,
  OI.PRODUCT_ID,
  OI.INVENTORY_ITEM_ID,
  P.DISTRIBUTION_CENTER_ID                                              AS DC_ID,
  TO_NUMBER(TO_CHAR(OI.CREATED_AT::DATE,   'YYYYMMDD'))                  AS ORDER_DATE_ID,
  IFF(OI.SHIPPED_AT    IS NULL, NULL, TO_NUMBER(TO_CHAR(OI.SHIPPED_AT::DATE,   'YYYYMMDD'))) AS SHIPPED_DATE_ID,
  IFF(OI.DELIVERED_AT  IS NULL, NULL, TO_NUMBER(TO_CHAR(OI.DELIVERED_AT::DATE, 'YYYYMMDD'))) AS DELIVERED_DATE_ID,
  IFF(OI.RETURNED_AT   IS NULL, NULL, TO_NUMBER(TO_CHAR(OI.RETURNED_AT::DATE,  'YYYYMMDD'))) AS RETURNED_DATE_ID,
  OI.STATUS,
  1                                                                     AS QUANTITY,
  OI.SALES_PRICE,
  COALESCE(II.COST, P.COST)                                             AS UNIT_COST_AT_SALE,
  OI.SALES_PRICE - COALESCE(II.COST, P.COST)                            AS GROSS_MARGIN
FROM &{ENV}_SILVER.STAGING.ORDER_ITEMS OI
LEFT JOIN &{ENV}_SILVER.STAGING.INVENTORY_ITEMS II
  ON OI.INVENTORY_ITEM_ID = II.INVENTORY_ITEM_ID
LEFT JOIN &{ENV}_SILVER.STAGING.PRODUCTS P
  ON OI.PRODUCT_ID = P.PRODUCT_ID;
